script
	function validate_elementForm()
	{
		/*
		if( $('#title').val() == '' )
		{
			alert("#{__i('title is required')}");
			return false;
		}
		if( $('#domain').val() == '' )
		{
			alert("#{__i('domain is required')}");
			return false;
		}
		*/
	}

	$(function()
	{
		//- on change del type, aggiorno i tabs
		$('input.type_radio_button').click( function( event )
		{
			if( $(this).val() == 'module' ) {
				$('#isTableInput').fadeOut('fast');
				$('.tabsButtonsCont').fadeIn('fast');
			} else {
				$('#isTableInput').fadeIn('fast');
				$('.tabsButtonsCont').fadeOut('fast');
				selectTab('tabButtonBase','tabBase');
			}
		});
		
		//- on ready imposto i tab a seconda del type del mio div
		$(document).ready(
			function()
			{
				//- sempre imposto il primo tab (il base data)
				selectTab('tabButtonBase','tabBase');
				//- se type Ã¨ module, visualizzo i tab, altrimenti no
				if ('#{element.type}' == 'module') {
					$('#isTableInput').fadeOut('fast');
					$('.tabsButtonsCont').fadeIn('fast');
				} else {
					$('#isTableInput').fadeIn('fast');
					$('.tabsButtonsCont').fadeOut('fast');
				}
			}
		);					
	});

img(src='/images/pov/icon_core_div_60x45.png').floatLeft
include ../includes/formHeader

form(method='post', action='/#{elementName}s/edit/#{element._id || ""}', onsubmit='return validate_elementForm()' )
	include ../includes/formSubmitTop
	div.size5.floatLeft
		div.mainColLeft
			.formRow
				h5.formLabel #{__i('type')}
					span.formError *
				if ( element.type != 'vertCont' && element.type != 'module' ) 
					input(type='radio', name='type', value='horizCont', checked=true).type_radio_button
				else
					input(type='radio', name='type', value='horizCont').type_radio_button
				span #{__i('horizontal container')}
				br
				if (element.type == 'vertCont' )
					input(type='radio', name='type', value='vertCont', checked=true).type_radio_button
				else
					input(type='radio', name='type', value='vertCont').type_radio_button
				span #{__i('vertical container')}
				br
				if (element.type == 'module' )
					input(type='radio', name='type', value='module', checked=true).type_radio_button
				else
					input(type='radio', name='type', value='module').type_radio_button
				span #{__i('module')}		
			div(style='display:none;').tabsButtonsCont
				a(onclick='selectTab("tabButtonBase","tabBase")')#tabButtonBase.tabButton #{'div container'}
				a(onclick='selectTab("tabButtonView","tabView")')#tabButtonView.tabButton #{'view'}
				a(onclick='selectTab("tabButtonController","tabController")')#tabButtonController.tabButton #{'controller'}
			div#tabsCont
				div(style='display:none;')#tabBase
					.formRow
						h5.formLabel id
						span &nbsp;=&nbsp;
						input(id='dom_id', name='dom_id', value='#{element.dom_id || ""}').size4
						p  #{__i('the id attribute of the div')}
					.formRow
						h5.formLabel class
						span &nbsp;=&nbsp;
						input(id='class', name='class', value='#{element.class || ""}').size4
						p  #{__i('names of css classes to be used for this div, space separated')}
					.formRow
						h5.formLabel  #{__i('automatically generate inline styles')}
						- var field = 'inline_style';
						- var fieldValue = ( element.inline_style || element.inline_style === undefined ) ? true : false;
						include ../includes/formBoolean
						p #{__i('these are styles needed for horizontal and verdical alignment of children inside a container. omitting them will render a horizCont the same way of a vertCont.')}
					div(style='display:none;')#isTableInput.formRow
						h5.formLabel  #{__i('render as table')}
						- var field = 'is_table';
						- var fieldValue = ( !element.is_table || element.is_table === undefined ) ? false : true;
						include ../includes/formBoolean
						p #{__i('render the div as an html table. for example this prevents new line wrapping for children of an horizontal container')}
				div(style='display:none;')#tabView
					.formRow
						h5.formLabel view
						textarea(id='view', name='view', style='height:300px;').size4.code.floatRight #{element.view || ""}
						.clear
						p  #{__i('this is the html template for this div')}
						p.textMini #{__i("right now the only implemented template engine is jade, so must use it in views")}
						p.textMini #{__i("to learn how jade works")}:
							a(href='http://jade-lang.com/',target='_blank') jade site (one page!)
							a(href='https://github.com/visionmedia/jade',target='_blank') jade on github (all the info)
						hr
						p  #{__i('under development. not yet reliable')}
					include formHelp_view
				div(style='display:none;')#tabController
					.formRow
						h5.formLabel controller
						div(style='margin-top:0px;').tabsButtonsContMini.floatRight.size4
							a(onclick='selectTab("tabButtonEdit","tabEdit")')#tabButtonEdit.tabButtonMini.tabButtonSelected #{'edit'}
							a(onclick='selectTab("tabButtonJsonView","tabJsonView")')#tabButtonJsonView.tabButtonMini #{'json view'}
						div#tabsCont
							div#tabEdit
								div.jstreeColumn.floatRight
									h6.size1AndHalf #{__i('drag and drop statements to controller')}:
									div#statementsTree.size1AndHalf.jstree.jstreeStatements
									p.textMini.size1AndHalf #{__i('right now there is only the find() statement available. the find() statement is a query on a model, with conditions and fields support')}
									textarea(id='controller', name='controller', readonly='readonly').invisible #{element.controller || ""}
								div.jstreeColumn.floatRight.rightBorder
									div#controllerTree.size2.jstree
							div(style='display:none;')#tabJsonView
								pre.size4.code.floatRight.
									#{renderJson(element.controller)}
						div.clear
						hr
						p  #{__i('under development. not yet reliable')}
						script(language='JavaScript', type='text/javascript', src='/javascripts/jq/jstree/jquery.jstree.js')
						include formJs
						
	div.size1.floatLeft
		div.mainColRight
			include ../includes/formStatus
	div.clear

	include ../includes/formSubmitBottom

