script
	function validate_elementForm() {
		//- il nome è obbligatorio
		if( $('#name').val() == '' )
		{
			alert("#{__i('name is required')}");
			return false;
		}
		//- se si sta cambiando il nome, non si può usare un nome già usato
		if( $('#name').val() != $('#old_name').val() )
		{
			//- var linkDom = window.parent.$('#schemaTree a:contains("'+$('#name').val()+'")');
			var liDom = $('#schemaTree li:data(name='+$('#name').val()+')');
			var linkDom = liDom.children('a');
			//console.log(linkDom);
			if ( linkDom.length > 0 ) {
				alert("#{__i('a field already exists with name')}: "+$('#name').val());
				return false;
			}
		}
		//- se si sta cambiando il nome -> warning sulla perdita dati
		if( $('#name').val() != $('#old_name').val() && $('#old_name').val().substr(0,8) != 'newfield' )
		{
			if (!confirm('#{__i("renaming the field means to loose all data saved for this field. continue?")}')) return false;
		}
		//- se si sta cambiando type -> warning sulla perdita dati
		if( $('#type').val() != $('#old_type').val() )
		{
			if (!confirm('#{__i("changing type means to loose all data saved for this field (unless changing from Number to String). continue?")}')) return false;
		}
		//- alert($('#type_model').val());
		window.parent.saveField( { 'old_name': $('#old_name').val(), 'name': $('#name').val(), 'type': $('#type').val(), 'type_model': $('#type_model').val(), 'type_cardinality': $('#type_cardinality').val(), 'description': $('#description').val(), 'required': $('input[name="required"]:checked').val() } );
		window.parent.$.modal.close();
		return false;
	}
	
	function typeChanged() {
		if ( $('#type').val() == 'ObjectId' ) {
			$('#type_model_container').show();
		} else {
			$('#type_model_container').hide();
		}
	}
	
	$(document).ready(function() {
		//se questo form è stato aperto su type='ObjectId' devo visualizzare da subito il combo coi models
		typeChanged();
	});
	

img(src='/images/pov/icon_core_jslModel_60x45.png').floatLeft
include ../includes/formHeader

//- come primo parametro devo comunque passare l'id del modulo cui sto modificando il field, perchè controllerà i permessi sul modulo
form(onsubmit='return validate_elementForm()').size4
	.formRow
		h5.formLabel #{__i('name')}
			span.formError *
		input(id='name', name='name', value='#{element.name || ""}').size3
	.formRow
		h5.formLabel #{__i('type')}
			span.formError *
		select(id='type', name='type', onchange='typeChanged();')
			each combo_type in combo_types
				if element.type == combo_type.name
					option(value='#{combo_type.name}',selected='true') #{combo_type.label}
				else
					option(value='#{combo_type.name}') #{combo_type.label}
		span#type_model_container :
			select(id='type_model', name='type_model', onchange='')
				each combo_model in combo_models
					if element.type_model == combo_model._id
						option(value='#{combo_model._id}',selected='true') #{combo_model.name}
					else
						option(value='#{combo_model._id}') #{combo_model.name}
			span :
			select(id='type_cardinality', name='type_cardinality', onchange='')
				if element.type_cardinality == 'multiple'
					option(value='single') 1:1
					option(value='multiple',selected='true') 1:N
				else
					option(value='single',selected='true') 1:1
					option(value='multiple') 1:N
			
	.formRow
		h5.formLabel #{__i('description')}
		textarea(id='description', name='description'}').size3 #{element.description}
		p  #{__i('this is an explanation on how to compile this field, and will be shown only in the form')}
	.formRow
		h5.formLabel  #{__i('required')}
		- var field = 'required';
		- var fieldValue = ( !element.required || element.required === undefined || element.required == 'false' ) ? false : true;
		include ../includes/formBoolean
	hr
	input(type='hidden', id='old_name', name='old_name', value='#{element.old_name || ""}')
	input(type='hidden', id='old_type', name='old_type', value='#{element.old_type || ""}')
			
	input(type='submit', title='#{__i('set')}', value='#{__i('set')}').adminButton.saveButton


