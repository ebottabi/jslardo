script


	/* ### COMMON VARS && FUNCTIONS ### */
	


	/*
	qui ci metto la configurazione dei type consentiti, condivisa da tutti i jstree di questa pagina
	convenzioni:
	*/
	//popolo allowedTypes
	var valid_children = [];
	var types = {};
	var datatypes = !{app.jsl.datatypes.stringify()};
	for ( var i = 0; i < datatypes.length; i++ ) {
		valid_children.push( datatypes[i].name );
		types[datatypes[i].name] = {
			'icon' : {
				'image' : '/images/pov/'+datatypes[i].icon+'_20x15.png'
			},
			//'valid_children' : valid_children
			'valid_children' : 'none'
		};
	}
	var allowedTypes = {
		'valid_children' : valid_children,
		'max_depth' : -2,
		'max_children' : -2,					
		'types' : types
	};
	/* così è come dovrebbe uscire
	var allowedTypes = {
		'valid_children' : [ 'String','Number','Boolean' ],
		'max_depth' : -2,
		'max_children' : -2,					
		'types' : {
			'String' : {
				'icon' : {
					'image' : '/images/pov/icon_data_string_20x15.png'
				},
				//'valid_children' : [ 'String','Number','Boolean' ]
				'valid_children' : 'none'
			},
			'Number' : {
				'icon' : {
					'image' : '/images/pov/icon_data_double_20x15.png'
				},
				'valid_children' : 'none'
			},
			'Boolean' : {
				'icon' : {
					'image' : '/images/pov/icon_data_flag_20x15.png'
				},
				'valid_children' : 'none'
			}
		}
	};
	*/
	
	/*
	converte un tree json (preso con tree.get_json()) in uno schema testuale per
	mongoose pronto per essere salvato nel db come stringa
	*/
	function treeToSchema( next ) {
		//siccome jstree fa cagare, non posso usare $('#schemaTree').jstree('get_json') che non funziona
		//quindi devo ricostruire io a mano l'oggetto json di tutto il tree:
		//ciclo su tutti i nodi del dom, e per ciascuno leggo i dati json gestiti da jquery con la funzione data()
		var schemaJson = {};
		var fields = $('#schemaTree').children().children();
		//console.log('treeToSchema fields: ');
		//console.log(fields);
		if ( fields.length > 0 ) {
			for ( var i=0; i<fields.length; i++ ) {
				var field = $(fields[i]).data();
				//console.log(field);
				//distinguo a seconda del type
				switch ( field.type ) {
					case 'ObjectId':
						var fieldObj = { 'type': 'ObjectId', 'ref': 'jslmodel_'+field.type_model, 'required': field.required, 'name_full': field.name_full, 'description': field.description };
						break;
					default:
						var fieldObj = { 'type': field.type, 'required': field.required, 'name_full': field.name_full, 'description': field.description };
						//schemaJson[field.name] = fieldObj;
						break;
				}
				//considero la cardinality, e assegno all'array
				if ( field.type_cardinality == 'multiple' ) {
					schemaJson[field.name] = [ fieldObj ];
				} else {
					schemaJson[field.name] = fieldObj;
				}
				
			}
			//via ajax mi faccio dare i campi interni di jslardo che ogni schema deve avere
			$.ajax({
				url: '/json/fields/addInternalFields',
				type: 'POST', 
				dataType: 'json',
				dataType: 'json',
				//'data' è l'oggetto che vene mandato in POST allo script in 'url'
				data: schemaJson, //questo viene passato a getInternalFields, che me lo ritorna popolato con i field interni obbligatori
				complete: function() {
					//console.log('process complete');
				},
				success: function(result) {
					schemaJson = result;
					//console.log('treeToSchema ritorna: ');
					//console.log(schemaJson);
					next( schemaJson );
				},
				error: function() {
					console.log('ajax error calling: /json/fields/getInternalFields');
				}
			});								
		} else {
			next( schemaJson );
		}
	}
	
	/*
	converte uno schema mongoose testuale (dal textarea) in un oggetto json 
	normalizzato e compatibile con jstree
	*/
	function schemaToTree() {
		//inizializzo il json digeribile dal tree
		var treeJson = { 'data': []};
		//leggo lo schema dal textarea
		var schema = $('#jslSchema').val();
		//console.log('schemaToTree(): schema:');
		//console.log(schema);
		if (schema != '') {
			//ho uno schema non vuoto, procedo nel parsing
			var schemaJson = JSON.parse(schema);
			//console.log('schemaJson:');
			//console.log(schemaJson);
			//normalizzo lo schema in modo da renderlo digeribile al tree
			for ( var field in schemaJson) {
				//a priori scardo i field di sistema di jslardo
				if ( field == 'author' || field == 'created' || field == 'status' || field == 'jslModel' ) {
					//skippo
				} else {
					if ( schemaJson.hasOwnProperty(field) && typeof schemaJson.field !== 'function') {
						//console.log('ho trovato questa field: '+field+' che vale: '+schemaJson[field]);
						//ho trovato un field
						//ora devo capire se ha cardinality mutipla, ovvero se nello schema è definito come un array
						//if (schemaJson[field] && typeof schemaJson[field] === 'object' && schemaJson[field].constructor === Array) {
						if ( is_array( schemaJson[field] ) ) {
							//console.log('multiple');
							var type_cardinality = 'multiple';
							schemaJson[field] = schemaJson[field].pop(); //ovviamente ho un solo elemento, per definizione di schema mongoose
						} else {
							//console.log('single');
							var type_cardinality = 'single';
						}
						var treeProperty = {
							'data' : field, 
							'attr' : { 'rel' : schemaJson[field].type },
							'metadata' : {
								'name' : field,
								'name_full' : schemaJson[field].name_full,
								'type' : schemaJson[field].type,
								'type_model' : ( schemaJson[field].ref ) ? schemaJson[field].ref.substr(9) : '',
								'type_cardinality' : type_cardinality,
								'description' : schemaJson[field].description,
								'required' : schemaJson[field].required
							}
						};
						treeJson.data.push(treeProperty);
					}
				}
			}
		}
		//console.log('schemaToTree(): treeJson:');
		//console.log(treeJson);
		return treeJson;
	}
	
	/*
	questa viene richiamata dai form popup per salvare
	*/
	function saveField(field) {
		//ora aggiorno il dom
		var liDom = $('#schemaTree li:data(name='+field.old_name+')');
		var linkDom = liDom.children('a');
		//salvo l'icona corrente
		var linkIconDom = linkDom.children('ins');
		//azzero il contenuto del nodo e scrivo il nome
		linkDom.html(field.name);
		//poi rimetto l'icona
		linkDom.prepend(linkIconDom);
		//poi riassegno tutti i valori json
		//console.log(field);
		linkDom.parent().attr('rel',field.type);
		linkDom.parent().data('name',field.name);
		linkDom.parent().data('name_full',field.name_full);
		linkDom.parent().data('type',field.type);
		linkDom.parent().data('type_model',field.type_model);
		linkDom.parent().data('type_cardinality',field.type_cardinality);
		linkDom.parent().data('description',field.description);
		linkDom.parent().data('required', (!field.required || field.required === undefined || field.required == 'sure_this_is_yes') ? true : false );
		//poi riassegno tutto aggiornato al textarea
		treeToSchema(function( populatedSchema ){
			$('#jslSchema').html( JSON.stringify( populatedSchema ) );
			return;
		});
	}
	
	
	
	/* ### SCHEMA TREE ### */
	
	//prima faccio il parsing di quanto ho nella textarea
	
	//creo l'albero con lo schema
	$('#schemaTree').jstree({
		'core' : {  },
		'types' : allowedTypes,				
		'json_data' : schemaToTree(),
		'themes' : {
			'theme' : 'classic'
		},
		'dnd' : {
			'tree' : 'schemaTree'
		},
		'contextmenu' : {
			'items' : {
				'remove' : false,
				'rename' : false,
				'create' : false,
				'ccp' : false,
				'delete' : {
					'label'				: 'delete',
					'icon'				: false,
					'action'			: function (obj) {
						//devo rimuovere l'elemento dal dom
						//prima chiedo conferma
						if (!confirm('#{__i("deleting a field also delete all contents stored for (only) that field. continue?")}')) return false;
						var liDom = $('#schemaTree li:data(name='+$(obj).data().name+')');
						liDom.remove();
						//poi riassegno tutto aggiornato al textarea
						treeToSchema(function( populatedSchema ){
							$('#jslSchema').html( JSON.stringify( populatedSchema ) );
							return;
						});
					}
				}
			}
		},
		'plugins' : [ 'themes', 'json_data', 'ui', 'dnd', 'types', 'contextmenu' ]
	})
	
	.bind("select_node.jstree", function (e, data) {
		//console.log(data);
		//non so perchè (jstree di merda) ma quando clicco un nodo, il tree perde tutti i suoi dati json tranne quelli del nodo.
		//$('#schemaTree').jstree('refresh');
		//$('#schemaTree').jstree('lock');
		
		var jsonDiv = $(data.rslt.obj).data();
		//console.log('select_node.jstree: #schemaTree:');
		//console.log($('#schemaTree').jstree('get_json'));
		// Display an external page using an iframe
		if ( !jsonDiv.type_model ) jsonDiv.type_model = 'none'; //devo assegnare un valore di default perchè la route se lo aspetta nei params
		var src = '/fields/edit/'+'#{element._id}'+'/'+jsonDiv.name+'/'+jsonDiv.name_full+'/'+jsonDiv.type+'/'+jsonDiv.type_model+'/'+jsonDiv.type_cardinality+'/'+jsonDiv.required+'/'+jsonDiv.description;
		openModal(src);
		/*
		$.modal('<iframe src="' + src + '" height="502" width="700" style="border:0">', {
			closeHTML:'',
			containerCss:{
				backgroundColor:"#fff",
				borderColor:"#fff",
				height:502,
				padding:0,
				margin:0,
				width:700
			},
			overlayClose:true,
			modal:true,
			opacity:70
		});
		*/
	})
	
	.bind('prepare_move.jstree', function (e, data) {
		//console.log('prepare_move');
		//devo decidere se copiare o muovere
		//se mi sto muovendo all'interno del mio tree sto muovendo, altrimenti copio
		var oldTree = data.rslt.op.closest('.jstree').attr('id');
		var newTree = data.rslt.np.closest('.jstree').attr('id');
		if ( oldTree == newTree ) {
			//se il tree non sta cambiando, vuol dire che sto muovendo un nodo dentro al tree, quindi non devo copiare il nodo
			data.inst.set_copying(false);
		}
		else
		{
			//per ora in tutti gli altri casi copio
			data.inst.set_copying(true);
			
			//sovrascrivo il nome del field che mi arriva con un nome seriale automatico
			var defaultFieldName = 'newfield';
			var newFieldName = '';
			var obj = data.rslt.o;
			var objJson = $(obj).data();
			var counter = 0;
			var found = false;
			while ( !found ) {
				//console.log('ciclo su: ');
				//conto quanti elementi già esistono nel tree con il nome 'newfield'
				if ( $('#schemaTree a:contains("'+defaultFieldName+counter+'")').length > 0 ) {
					counter++;
				} else {
					newFieldName = defaultFieldName+counter;
					found = true;
				}
			}
			
			
			//console.log('newFieldName:'+newFieldName);
			
			objJson.name = newFieldName;
			objJson.name_full = newFieldName;
		}

		
	})
	.bind('move_node.jstree', function (e, data) {
		//console.log('move_node.jstree');
		//console.log(data);
		
		//solo se sto copiando
		if ( data.inst.get_copying() ) {
			//forzo un aggiornamento del nome del nuovo elemento draggato dentro al tree
			//il nome lo prendo dai dati json del nodo draggato
			var obj = data.rslt.o;
			var objJson = $(obj).data();
			//var linkDom = $('#schemaTree a:contains("'+objJson.type+'")');
			//var linkDom = $('#schemaTree li[ref="'+objJson.type+'"]').children('a');
			
			//var linkDom = $('#schemaTree li:data(type_model="jslmodel_none")').css('background-color', 'red');
			//console.log($('#schemaTree li').data());
			var liDom = $('#schemaTree li:data(isNew)');
			//dopo che ho trovato il mio elemento appena draggato, gli resetto la property isNew
			liDom.data('isNew', false);
			var linkDom = liDom.children('a');
			var linkIconDom = linkDom.children('ins');
			linkDom.html(objJson.name);//qui sarebbe bello visualizzare name_full, ma non so se da qualche altra parte poi cerco in base a questo name
			linkDom.prepend(linkIconDom);
		}
		
		//aggiorno il textarea
		treeToSchema(function( populatedSchema ){
			$('#jslSchema').html( JSON.stringify( populatedSchema ) );
		});
	});







	/* ### ELEMENTS TREE ### */
	

	//definisco il json per popolare questo tree
	var treeJson = []; //è json_data.data
	var datatypes = !{app.jsl.datatypes.stringify()};
	for ( var i = 0; i < datatypes.length; i++ ) {
		treeJson.push({ 
			'data' : datatypes[i].label,
			'attr' : { 'rel' : datatypes[i].name },
			'metadata' : {
				'name' : '', //viene definito runtime quando si copia dentro ad uno schema
				'name_full' : '', //viene definito runtime quando si copia dentro ad uno schema
				'type' : datatypes[i].name,
				'type_model' : 'none',
				'type_cardinality' : 'single',
				'description' : '',
				'required' : false,
				'isNew' : true
			}
		});
	}

	//creo il tree con gli elementi da draggare
	$('#elementsTree').jstree({
		'core' : {  },
		'types' : allowedTypes,								
		'json_data' : {
			'data' : treeJson
		},
		'themes' : {
			'theme' : 'classic'
		},
		'dnd' : {
			'tree' : 'elementsTree'
		},
		'plugins' : [ 'themes', 'json_data', 'ui', 'dnd', 'types' ]
		
	})
	//.bind('select_node.jstree', function (e, data) { alert(data.rslt.obj.data('type')); });
	.bind('prepare_move.jstree', function (e, data) {
		//console.log('prepare_move');
		//se sto cpiando qui dentro, devo sempre impostare il copying, altrimenti l'elemento droppato qui sparirebbe dal suo tree originario
		//poi, in move_node, farò un rollback su questo albero per eliminare l'elemento copiato
		data.inst.set_copying(true);
	})
	.bind('move_node.jstree', function (e, data) {
		//console.log(data);
		//console.log(data.rslt.o[0]);
		$.jstree.rollback(data.rlbk);
		alert('#{__i('forbidden')}');
	});
	
	
	
	
	
	
	
	
	
	
	
	
	
	
